"use strict";

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var mov_script = require("./mov_script");
var scripts = mov_script.scripts;
var assert = mov_script.assert;
var action = mov_script.action;

var Scene = (function () {
  function Scene(actor) {
    _classCallCheck(this, Scene);

    this.actor = actor;
    this.answer = scripts.answer;
  }

  _createClass(Scene, null, [{
    key: "defaultAnswer",
    value: function defaultAnswer() {
      return "집에가자";
    }
  }]);

  return Scene;
})();

var ActionScene = (function (_Scene) {
  _inherits(ActionScene, _Scene);

  function ActionScene(actor, weapon, die_word) {
    _classCallCheck(this, ActionScene);

    _get(Object.getPrototypeOf(ActionScene.prototype), "constructor", this).call(this, actor);
    this.weapon = weapon;
    this.die_word = die_word;
  }

  return ActionScene;
})(Scene);

var scene = new Scene("장동건");
var action_scene = new ActionScene("유오성", "사시미", "고마해라 마이 뭇다 아이가");
console.log(scene);
console.log(action_scene);

